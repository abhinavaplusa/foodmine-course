{"ast":null,"code":"import { icon, map, marker, tileLayer } from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/location.service\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"map\"];\nfunction MapComponent_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function MapComponent_button_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.findMyLocation());\n    });\n    i0.ɵɵtext(1, \" Find My Location \");\n    i0.ɵɵelementEnd();\n  }\n}\nlet MapComponent = /*#__PURE__*/(() => {\n  class MapComponent {\n    constructor(locationService) {\n      this.locationService = locationService;\n      this.readonly = false;\n      this.MARKER_ZOOM_LEVEL = 16;\n      this.MARKER_ICON = icon({\n        iconUrl: 'https://res.cloudinary.com/foodmine/image/upload/v1638842791/map/marker_kbua9q.png',\n        iconSize: [42, 42],\n        iconAnchor: [21, 42]\n      });\n      this.DEFAULT_LATLNG = [13.75, 21.62];\n    }\n    ngOnChanges() {\n      if (!this.order) return;\n      this.initializeMap();\n      if (this.readonly && this.addressLatLng) {\n        this.showLocationOnReadonlyMode();\n      }\n    }\n    showLocationOnReadonlyMode() {\n      const m = this.map;\n      this.setMarker(this.addressLatLng);\n      m.setView(this.addressLatLng, this.MARKER_ZOOM_LEVEL);\n      m.dragging.disable();\n      m.touchZoom.disable();\n      m.doubleClickZoom.disable();\n      m.scrollWheelZoom.disable();\n      m.boxZoom.disable();\n      m.keyboard.disable();\n      m.off('click');\n      m.tap?.disable();\n      this.currentMarker.dragging?.disable();\n    }\n    initializeMap() {\n      if (this.map) return;\n      this.map = map(this.mapRef.nativeElement, {\n        attributionControl: false\n      }).setView(this.DEFAULT_LATLNG, 1);\n      tileLayer('https://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(this.map);\n      this.map.on('click', e => {\n        this.setMarker(e.latlng);\n      });\n    }\n    findMyLocation() {\n      this.locationService.getCurrentLocation().subscribe({\n        next: latlng => {\n          this.map.setView(latlng, this.MARKER_ZOOM_LEVEL);\n          this.setMarker(latlng);\n        }\n      });\n    }\n    setMarker(latlng) {\n      this.addressLatLng = latlng;\n      if (this.currentMarker) {\n        this.currentMarker.setLatLng(latlng);\n        return;\n      }\n      this.currentMarker = marker(latlng, {\n        draggable: true,\n        icon: this.MARKER_ICON\n      }).addTo(this.map);\n      this.currentMarker.on('dragend', () => {\n        this.addressLatLng = this.currentMarker.getLatLng();\n      });\n    }\n    set addressLatLng(latlng) {\n      if (!latlng.lat.toFixed) return;\n      latlng.lat = parseFloat(latlng.lat.toFixed(8));\n      latlng.lng = parseFloat(latlng.lng.toFixed(8));\n      this.order.addressLatLng = latlng;\n      console.log(this.order.addressLatLng);\n    }\n    get addressLatLng() {\n      return this.order.addressLatLng;\n    }\n    static #_ = this.ɵfac = function MapComponent_Factory(t) {\n      return new (t || MapComponent)(i0.ɵɵdirectiveInject(i1.LocationService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MapComponent,\n      selectors: [[\"map\"]],\n      viewQuery: function MapComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapRef = _t.first);\n        }\n      },\n      inputs: {\n        order: \"order\",\n        readonly: \"readonly\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 4,\n      vars: 1,\n      consts: [[1, \"container\"], [\"class\", \"find-location\", 3, \"click\", 4, \"ngIf\"], [1, \"map\"], [\"map\", \"\"], [1, \"find-location\", 3, \"click\"]],\n      template: function MapComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵtemplate(1, MapComponent_button_1_Template, 2, 0, \"button\", 1);\n          i0.ɵɵelement(2, \"div\", 2, 3);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.readonly);\n        }\n      },\n      dependencies: [i2.NgIf],\n      styles: [\".container[_ngcontent-%COMP%]{position:relative;width:35rem;height:22rem;text-align:center}.map[_ngcontent-%COMP%]{width:100%;height:100%}.find-location[_ngcontent-%COMP%]{position:absolute;margin:auto;width:15rem;min-height:3rem;font-size:1.2rem;top:0;left:0;right:0;z-index:1000;background-color:#ffffff7c;cursor:pointer}.find-location[_ngcontent-%COMP%]:hover{background-color:#fff}\"]\n    });\n  }\n  return MapComponent;\n})();\nexport { MapComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}