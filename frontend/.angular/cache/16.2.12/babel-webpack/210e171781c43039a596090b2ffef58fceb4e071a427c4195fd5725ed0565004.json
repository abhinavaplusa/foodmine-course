{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { USER_LOGIN_URL, USER_REGISTER_URL } from '../shared/constants/urls';\nimport { User } from '../shared/models/User';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nconst USER_KEY = 'User';\nlet UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http, toastrService) {\n      this.http = http;\n      this.toastrService = toastrService;\n      this.userSubject = new BehaviorSubject(this.getUserFromLocalStorage());\n      this.userObservable = this.userSubject.asObservable();\n    }\n    get currentUser() {\n      return this.userSubject.value;\n    }\n    login(userLogin) {\n      return this.http.post(USER_LOGIN_URL, userLogin).pipe(tap({\n        next: user => {\n          this.setUserToLocalStorage(user);\n          this.userSubject.next(user);\n          this.toastrService.success(`Welcome to Foodmine ${user.name}!`, 'Login Successful');\n        },\n        error: errorResponse => {\n          this.toastrService.error(errorResponse.error, 'Login Failed');\n        }\n      }));\n    }\n    register(userRegiser) {\n      return this.http.post(USER_REGISTER_URL, userRegiser).pipe(tap({\n        next: user => {\n          this.setUserToLocalStorage(user);\n          this.userSubject.next(user);\n          this.toastrService.success(`Welcome to the Foodmine ${user.name}`, 'Register Successful');\n        },\n        error: errorResponse => {\n          this.toastrService.error(errorResponse.error, 'Register Failed');\n        }\n      }));\n    }\n    logout() {\n      this.userSubject.next(new User());\n      localStorage.removeItem(USER_KEY);\n      window.location.reload();\n    }\n    setUserToLocalStorage(user) {\n      localStorage.setItem(USER_KEY, JSON.stringify(user));\n    }\n    getUserFromLocalStorage() {\n      const userJson = localStorage.getItem(USER_KEY);\n      if (userJson) return JSON.parse(userJson);\n      return new User();\n    }\n    static #_ = this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UserService;\n})();\nexport { UserService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}